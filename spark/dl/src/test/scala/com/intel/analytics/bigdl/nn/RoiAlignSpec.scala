/*
 * Copyright 2016 The BigDL Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intel.analytics.bigdl.nn

import com.intel.analytics.bigdl.tensor.{Storage, Tensor}
import com.intel.analytics.bigdl.utils.serializer.ModuleSerializationTest
import com.intel.analytics.bigdl.utils.{T, Table}
import org.scalatest.{FlatSpec, Matchers}

import scala.util.Random

class RoiAlignSpec extends FlatSpec with Matchers {
  "updateOutput Float type" should "work properly" in {
    val spatio_scale: Float = 1.0f
    val sampling_ratio: Int = 3
    val pooled_height: Int = 2
    val pooled_width: Int = 2

    val data = Array(
      0.092188894748687744, 0.770928561687469482, 0.096075117588043213,
      0.606129467487335205, 0.740989089012145996, 0.209153473377227783,
      0.675942838191986084, 0.677247583866119385, 0.778290212154388428,
      0.973559141159057617, 0.260578870773315430, 0.621038496494293213,
      0.447911143302917480, 0.977490484714508057, 0.795246899127960205,
      0.294553995132446289, 0.703423082828521729, 0.710112273693084717,
      0.447921514511108398, 0.392695903778076172, 0.399823546409606934,
      0.089961290359497070, 0.068192303180694580, 0.376524507999420166,
      0.333441734313964844, 0.016782283782958984, 0.471682012081146240,
      0.885782301425933838, 0.925795257091522217, 0.997642993927001953,
      0.255329608917236328, 0.997090280055999756, 0.862755298614501953,
      0.017064332962036133, 0.547964274883270264, 0.626714587211608887,
      0.162270247936248779, 0.397232651710510254, 0.807755470275878906,
      0.705809712409973145, 0.700596094131469727, 0.400665044784545898,
      0.686442553997039795, 0.729641854763031006, 0.353781521320343018,
      0.781765460968017578, 0.863787114620208740, 0.319018661975860596,
      0.772617399692535400, 0.784741044044494629, 0.861546695232391357,
      0.751667320728302002, 0.418625175952911377, 0.702994585037231445,
      0.823517203330993652, 0.766320824623107910, 0.229411661624908447,
      0.813293039798736572, 0.624578297138214111, 0.490244626998901367,
      0.623332679271697998, 0.773867785930633545, 0.415985643863677979,
      0.959160864353179932, 0.488681614398956299, 0.895825624465942383,
      0.621477127075195312, 0.493137657642364502, 0.609351456165313721,
      0.091437935829162598, 0.600001990795135498, 0.398541510105133057,
      0.399348437786102295, 0.392847657203674316, 0.988869130611419678,
      0.230268716812133789, 0.208232223987579346, 0.707948744297027588,
      0.626403272151947021, 0.651949584484100342, 0.284984469413757324,
      0.335488438606262207, 0.049357950687408447, 0.301807522773742676,
      0.124800682067871094, 0.524686992168426514, 0.240398705005645752,
      0.458889842033386230, 0.281274378299713135, 0.274779617786407471,
      0.835333824157714844, 0.859704613685607910, 0.414040923118591309,
      0.939092338085174561, 0.042475044727325439, 0.363186359405517578,
      0.188076615333557129, 0.530427575111389160, 0.226332545280456543,
      0.820584297180175781, 0.889384329319000244, 0.252143144607543945,
      0.090972721576690674, 0.813489794731140137, 0.346110284328460693,
      0.703486442565917969, 0.176333844661712646, 0.060184597969055176,
      0.784948408603668213, 0.236509859561920166, 0.382797598838806152,
      0.039351701736450195, 0.910848021507263184, 0.481847524642944336,
      0.048317193984985352, 0.576691806316375732, 0.640518784523010254,
      0.374584734439849854, 0.316590011119842529, 0.777487218379974365,
      0.672295331954956055, 0.023926794528961182, 0.111224174499511719,
      0.102596044540405273, 0.208422720432281494, 0.192029714584350586,
      0.990203082561492920, 0.445109605789184570, 0.702249765396118164,
      0.804978966712951660, 0.350527584552764893, 0.059680759906768799,
      0.047474801540374756, 0.890956938266754150, 0.013481676578521729,
      0.608536481857299805, 0.170393407344818115, 0.862231850624084473,
      0.280634343624114990, 0.371893405914306641, 0.360731363296508789,
      0.595396280288696289, 0.843137621879577637, 0.286689639091491699,
      0.740214586257934570, 0.095704078674316406, 0.248557686805725098,
      0.833596289157867432, 0.411873757839202881, 0.207457661628723145,
      0.579944610595703125, 0.600027263164520264, 0.999206304550170898,
      0.249821245670318604, 0.571609020233154297, 0.598886609077453613,
      0.225684285163879395, 0.058354258537292480, 0.944967746734619141,
      0.324443697929382324, 0.746452748775482178, 0.751328170299530029,
      0.295708060264587402, 0.735502660274505615, 0.800382494926452637,
      0.042658686637878418, 0.812661528587341309, 0.774087011814117432,
      0.068936407566070557, 0.171179831027984619, 0.268739402294158936,
      0.461669027805328369, 0.943676114082336426, 0.749311625957489014,
      0.319677948951721191, 0.492025792598724365, 0.726640522480010986,
      0.046660542488098145, 0.234475553035736084, 0.153811931610107422,
      0.165540635585784912, 0.956511735916137695, 0.958193540573120117,
      0.040861189365386963, 0.020073294639587402, 0.627923548221588135,
      0.622681140899658203, 0.617402970790863037, 0.194110214710235596,
      0.497514903545379639, 0.981203377246856689, 0.839235126972198486)

    val rois = Array(0, 0, 0, 7, 5, 1, 6, 2, 7, 5, 1, 3, 1, 6, 4, 0, 3, 3, 3, 3)
    val input = new Table
    input.insert(Tensor(Storage(data.map(x => x.toFloat))).resize(2, 2, 6, 8))
    input.insert(Tensor(Storage(rois.map(x => x.toFloat))).resize(4, 5))

    val roiAlign = RoiAlign[Float](spatio_scale, sampling_ratio, pooled_height, pooled_width)
    val res = roiAlign.forward(input)
    val expectedRes = Array(
      0.556808173656463623, 0.477057784795761108,
      0.494109004735946655, 0.611371397972106934,
      0.643471360206604004, 0.565631628036499023,
      0.427432537078857422, 0.425832986831665039)

    for (i <- expectedRes.indices) {
      assert(Math.abs(res.storage().array()(i) - expectedRes(i)) < 1e-6)
    }
  }

  "updateOutput Double type" should "work properly" in {
    val spatio_scale: Double = 1.0
    val sampling_ratio: Int = 3
    val pooled_height: Int = 2
    val pooled_width: Int = 2

    val data = Array(
      0.092188894748687744, 0.770928561687469482, 0.096075117588043213,
      0.606129467487335205, 0.740989089012145996, 0.209153473377227783,
      0.675942838191986084, 0.677247583866119385, 0.778290212154388428,
      0.973559141159057617, 0.260578870773315430, 0.621038496494293213,
      0.447911143302917480, 0.977490484714508057, 0.795246899127960205,
      0.294553995132446289, 0.703423082828521729, 0.710112273693084717,
      0.447921514511108398, 0.392695903778076172, 0.399823546409606934,
      0.089961290359497070, 0.068192303180694580, 0.376524507999420166,
      0.333441734313964844, 0.016782283782958984, 0.471682012081146240,
      0.885782301425933838, 0.925795257091522217, 0.997642993927001953,
      0.255329608917236328, 0.997090280055999756, 0.862755298614501953,
      0.017064332962036133, 0.547964274883270264, 0.626714587211608887,
      0.162270247936248779, 0.397232651710510254, 0.807755470275878906,
      0.705809712409973145, 0.700596094131469727, 0.400665044784545898,
      0.686442553997039795, 0.729641854763031006, 0.353781521320343018,
      0.781765460968017578, 0.863787114620208740, 0.319018661975860596,
      0.772617399692535400, 0.784741044044494629, 0.861546695232391357,
      0.751667320728302002, 0.418625175952911377, 0.702994585037231445,
      0.823517203330993652, 0.766320824623107910, 0.229411661624908447,
      0.813293039798736572, 0.624578297138214111, 0.490244626998901367,
      0.623332679271697998, 0.773867785930633545, 0.415985643863677979,
      0.959160864353179932, 0.488681614398956299, 0.895825624465942383,
      0.621477127075195312, 0.493137657642364502, 0.609351456165313721,
      0.091437935829162598, 0.600001990795135498, 0.398541510105133057,
      0.399348437786102295, 0.392847657203674316, 0.988869130611419678,
      0.230268716812133789, 0.208232223987579346, 0.707948744297027588,
      0.626403272151947021, 0.651949584484100342, 0.284984469413757324,
      0.335488438606262207, 0.049357950687408447, 0.301807522773742676,
      0.124800682067871094, 0.524686992168426514, 0.240398705005645752,
      0.458889842033386230, 0.281274378299713135, 0.274779617786407471,
      0.835333824157714844, 0.859704613685607910, 0.414040923118591309,
      0.939092338085174561, 0.042475044727325439, 0.363186359405517578,
      0.188076615333557129, 0.530427575111389160, 0.226332545280456543,
      0.820584297180175781, 0.889384329319000244, 0.252143144607543945,
      0.090972721576690674, 0.813489794731140137, 0.346110284328460693,
      0.703486442565917969, 0.176333844661712646, 0.060184597969055176,
      0.784948408603668213, 0.236509859561920166, 0.382797598838806152,
      0.039351701736450195, 0.910848021507263184, 0.481847524642944336,
      0.048317193984985352, 0.576691806316375732, 0.640518784523010254,
      0.374584734439849854, 0.316590011119842529, 0.777487218379974365,
      0.672295331954956055, 0.023926794528961182, 0.111224174499511719,
      0.102596044540405273, 0.208422720432281494, 0.192029714584350586,
      0.990203082561492920, 0.445109605789184570, 0.702249765396118164,
      0.804978966712951660, 0.350527584552764893, 0.059680759906768799,
      0.047474801540374756, 0.890956938266754150, 0.013481676578521729,
      0.608536481857299805, 0.170393407344818115, 0.862231850624084473,
      0.280634343624114990, 0.371893405914306641, 0.360731363296508789,
      0.595396280288696289, 0.843137621879577637, 0.286689639091491699,
      0.740214586257934570, 0.095704078674316406, 0.248557686805725098,
      0.833596289157867432, 0.411873757839202881, 0.207457661628723145,
      0.579944610595703125, 0.600027263164520264, 0.999206304550170898,
      0.249821245670318604, 0.571609020233154297, 0.598886609077453613,
      0.225684285163879395, 0.058354258537292480, 0.944967746734619141,
      0.324443697929382324, 0.746452748775482178, 0.751328170299530029,
      0.295708060264587402, 0.735502660274505615, 0.800382494926452637,
      0.042658686637878418, 0.812661528587341309, 0.774087011814117432,
      0.068936407566070557, 0.171179831027984619, 0.268739402294158936,
      0.461669027805328369, 0.943676114082336426, 0.749311625957489014,
      0.319677948951721191, 0.492025792598724365, 0.726640522480010986,
      0.046660542488098145, 0.234475553035736084, 0.153811931610107422,
      0.165540635585784912, 0.956511735916137695, 0.958193540573120117,
      0.040861189365386963, 0.020073294639587402, 0.627923548221588135,
      0.622681140899658203, 0.617402970790863037, 0.194110214710235596,
      0.497514903545379639, 0.981203377246856689, 0.839235126972198486)

    val rois = Array(0, 0, 0, 7, 5, 1, 6, 2, 7, 5, 1, 3, 1, 6, 4, 0, 3, 3, 3, 3)
    val input = new Table
    input.insert(Tensor(Storage(data.map(x => x))).resize(2, 2, 6, 8))
    input.insert(Tensor(Storage(rois.map(x => x.toDouble))).resize(4, 5))

    val roiAlign = RoiAlign[Double](spatio_scale, sampling_ratio, pooled_height, pooled_width)
    val res = roiAlign.forward(input)
    val expectedRes = Array(
      0.556808173656463623, 0.477057784795761108,
      0.494109004735946655, 0.611371397972106934,
      0.643471360206604004, 0.565631628036499023,
      0.427432537078857422, 0.425832986831665039)

    for (i <- expectedRes.indices) {
      assert(Math.abs(res.storage().array()(i) - expectedRes(i)) < 1e-6)
    }
  }
}

class RoiAlignSerialTest extends ModuleSerializationTest {
  override def test(): Unit = {
    val input = T()
    val input1 = Tensor[Float](1, 1, 2, 2).apply1(_ => Random.nextFloat())
    val input2 = Tensor[Float](1, 5).apply1(_ => Random.nextFloat())
    input(1.0f) = input1
    input(2.0f) = input2
    val roiAlign = new RoiAlign[Float](spatialScale = 1.0f, samplingRatio = 1,
      pooledW = 1, pooledH = 1).setName("roiAlign")
    runSerializationTest(roiAlign, input)
  }
}
